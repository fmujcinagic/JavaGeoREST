// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mapservice.proto

package at.tugraz;

/**
 * Protobuf service {@code eventservice.EventService}
 */
public  abstract class EventService
    implements com.google.protobuf.Service {
  protected EventService() {}

  public interface Interface {
    /**
     * <code>rpc events(.google.protobuf.Empty) returns (.eventservice.Events);</code>
     */
    public abstract void events(
        com.google.protobuf.RpcController controller,
        com.google.protobuf.Empty request,
        com.google.protobuf.RpcCallback<at.tugraz.Events> done);

    /**
     * <code>rpc eventById(.eventservice.EventById) returns (.eventservice.Event);</code>
     */
    public abstract void eventById(
        com.google.protobuf.RpcController controller,
        at.tugraz.EventById request,
        com.google.protobuf.RpcCallback<at.tugraz.Event> done);

    /**
     * <code>rpc logEvent(.eventservice.EventCreation) returns (.eventservice.Event);</code>
     */
    public abstract void logEvent(
        com.google.protobuf.RpcController controller,
        at.tugraz.EventCreation request,
        com.google.protobuf.RpcCallback<at.tugraz.Event> done);

    /**
     * <code>rpc getOSMFile(.eventservice.OSMFileRequest) returns (.eventservice.OSMFileResponse);</code>
     */
    public abstract void getOSMFile(
        com.google.protobuf.RpcController controller,
        at.tugraz.OSMFileRequest request,
        com.google.protobuf.RpcCallback<at.tugraz.OSMFileResponse> done);

    /**
     * <code>rpc GetData(.eventservice.RequestType) returns (.eventservice.ResponseType);</code>
     */
    public abstract void getData(
        com.google.protobuf.RpcController controller,
        at.tugraz.RequestType request,
        com.google.protobuf.RpcCallback<at.tugraz.ResponseType> done);

    /**
     * <pre>
     *for the roads
     * </pre>
     *
     * <code>rpc roadById(.eventservice.RoadById) returns (.eventservice.Event);</code>
     */
    public abstract void roadById(
        com.google.protobuf.RpcController controller,
        at.tugraz.RoadById request,
        com.google.protobuf.RpcCallback<at.tugraz.Event> done);

    /**
     * <code>rpc GetRoads(.eventservice.Roads) returns (.eventservice.Event);</code>
     */
    public abstract void getRoads(
        com.google.protobuf.RpcController controller,
        at.tugraz.Roads request,
        com.google.protobuf.RpcCallback<at.tugraz.Event> done);

    /**
     * <pre>
     *amenity full message
     * </pre>
     *
     * <code>rpc GetAmenity(.eventservice.Amenity) returns (.eventservice.Event);</code>
     */
    public abstract void getAmenity(
        com.google.protobuf.RpcController controller,
        at.tugraz.Amenity request,
        com.google.protobuf.RpcCallback<at.tugraz.Event> done);

    /**
     * <pre>
     * this is for mapping
     * </pre>
     *
     * <code>rpc GetMapping(.eventservice.MappingRequest) returns (.eventservice.Event);</code>
     */
    public abstract void getMapping(
        com.google.protobuf.RpcController controller,
        at.tugraz.MappingRequest request,
        com.google.protobuf.RpcCallback<at.tugraz.Event> done);

  }

  public static com.google.protobuf.Service newReflectiveService(
      final Interface impl) {
    return new EventService() {
      @java.lang.Override
      public  void events(
          com.google.protobuf.RpcController controller,
          com.google.protobuf.Empty request,
          com.google.protobuf.RpcCallback<at.tugraz.Events> done) {
        impl.events(controller, request, done);
      }

      @java.lang.Override
      public  void eventById(
          com.google.protobuf.RpcController controller,
          at.tugraz.EventById request,
          com.google.protobuf.RpcCallback<at.tugraz.Event> done) {
        impl.eventById(controller, request, done);
      }

      @java.lang.Override
      public  void logEvent(
          com.google.protobuf.RpcController controller,
          at.tugraz.EventCreation request,
          com.google.protobuf.RpcCallback<at.tugraz.Event> done) {
        impl.logEvent(controller, request, done);
      }

      @java.lang.Override
      public  void getOSMFile(
          com.google.protobuf.RpcController controller,
          at.tugraz.OSMFileRequest request,
          com.google.protobuf.RpcCallback<at.tugraz.OSMFileResponse> done) {
        impl.getOSMFile(controller, request, done);
      }

      @java.lang.Override
      public  void getData(
          com.google.protobuf.RpcController controller,
          at.tugraz.RequestType request,
          com.google.protobuf.RpcCallback<at.tugraz.ResponseType> done) {
        impl.getData(controller, request, done);
      }

      @java.lang.Override
      public  void roadById(
          com.google.protobuf.RpcController controller,
          at.tugraz.RoadById request,
          com.google.protobuf.RpcCallback<at.tugraz.Event> done) {
        impl.roadById(controller, request, done);
      }

      @java.lang.Override
      public  void getRoads(
          com.google.protobuf.RpcController controller,
          at.tugraz.Roads request,
          com.google.protobuf.RpcCallback<at.tugraz.Event> done) {
        impl.getRoads(controller, request, done);
      }

      @java.lang.Override
      public  void getAmenity(
          com.google.protobuf.RpcController controller,
          at.tugraz.Amenity request,
          com.google.protobuf.RpcCallback<at.tugraz.Event> done) {
        impl.getAmenity(controller, request, done);
      }

      @java.lang.Override
      public  void getMapping(
          com.google.protobuf.RpcController controller,
          at.tugraz.MappingRequest request,
          com.google.protobuf.RpcCallback<at.tugraz.Event> done) {
        impl.getMapping(controller, request, done);
      }

    };
  }

  public static com.google.protobuf.BlockingService
      newReflectiveBlockingService(final BlockingInterface impl) {
    return new com.google.protobuf.BlockingService() {
      public final com.google.protobuf.Descriptors.ServiceDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }

      public final com.google.protobuf.Message callBlockingMethod(
          com.google.protobuf.Descriptors.MethodDescriptor method,
          com.google.protobuf.RpcController controller,
          com.google.protobuf.Message request)
          throws com.google.protobuf.ServiceException {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.callBlockingMethod() given method descriptor for " +
            "wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return impl.events(controller, (com.google.protobuf.Empty)request);
          case 1:
            return impl.eventById(controller, (at.tugraz.EventById)request);
          case 2:
            return impl.logEvent(controller, (at.tugraz.EventCreation)request);
          case 3:
            return impl.getOSMFile(controller, (at.tugraz.OSMFileRequest)request);
          case 4:
            return impl.getData(controller, (at.tugraz.RequestType)request);
          case 5:
            return impl.roadById(controller, (at.tugraz.RoadById)request);
          case 6:
            return impl.getRoads(controller, (at.tugraz.Roads)request);
          case 7:
            return impl.getAmenity(controller, (at.tugraz.Amenity)request);
          case 8:
            return impl.getMapping(controller, (at.tugraz.MappingRequest)request);
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message
          getRequestPrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.getRequestPrototype() given method " +
            "descriptor for wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return com.google.protobuf.Empty.getDefaultInstance();
          case 1:
            return at.tugraz.EventById.getDefaultInstance();
          case 2:
            return at.tugraz.EventCreation.getDefaultInstance();
          case 3:
            return at.tugraz.OSMFileRequest.getDefaultInstance();
          case 4:
            return at.tugraz.RequestType.getDefaultInstance();
          case 5:
            return at.tugraz.RoadById.getDefaultInstance();
          case 6:
            return at.tugraz.Roads.getDefaultInstance();
          case 7:
            return at.tugraz.Amenity.getDefaultInstance();
          case 8:
            return at.tugraz.MappingRequest.getDefaultInstance();
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

      public final com.google.protobuf.Message
          getResponsePrototype(
          com.google.protobuf.Descriptors.MethodDescriptor method) {
        if (method.getService() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "Service.getResponsePrototype() given method " +
            "descriptor for wrong service type.");
        }
        switch(method.getIndex()) {
          case 0:
            return at.tugraz.Events.getDefaultInstance();
          case 1:
            return at.tugraz.Event.getDefaultInstance();
          case 2:
            return at.tugraz.Event.getDefaultInstance();
          case 3:
            return at.tugraz.OSMFileResponse.getDefaultInstance();
          case 4:
            return at.tugraz.ResponseType.getDefaultInstance();
          case 5:
            return at.tugraz.Event.getDefaultInstance();
          case 6:
            return at.tugraz.Event.getDefaultInstance();
          case 7:
            return at.tugraz.Event.getDefaultInstance();
          case 8:
            return at.tugraz.Event.getDefaultInstance();
          default:
            throw new java.lang.AssertionError("Can't get here.");
        }
      }

    };
  }

  /**
   * <code>rpc events(.google.protobuf.Empty) returns (.eventservice.Events);</code>
   */
  public abstract void events(
      com.google.protobuf.RpcController controller,
      com.google.protobuf.Empty request,
      com.google.protobuf.RpcCallback<at.tugraz.Events> done);

  /**
   * <code>rpc eventById(.eventservice.EventById) returns (.eventservice.Event);</code>
   */
  public abstract void eventById(
      com.google.protobuf.RpcController controller,
      at.tugraz.EventById request,
      com.google.protobuf.RpcCallback<at.tugraz.Event> done);

  /**
   * <code>rpc logEvent(.eventservice.EventCreation) returns (.eventservice.Event);</code>
   */
  public abstract void logEvent(
      com.google.protobuf.RpcController controller,
      at.tugraz.EventCreation request,
      com.google.protobuf.RpcCallback<at.tugraz.Event> done);

  /**
   * <code>rpc getOSMFile(.eventservice.OSMFileRequest) returns (.eventservice.OSMFileResponse);</code>
   */
  public abstract void getOSMFile(
      com.google.protobuf.RpcController controller,
      at.tugraz.OSMFileRequest request,
      com.google.protobuf.RpcCallback<at.tugraz.OSMFileResponse> done);

  /**
   * <code>rpc GetData(.eventservice.RequestType) returns (.eventservice.ResponseType);</code>
   */
  public abstract void getData(
      com.google.protobuf.RpcController controller,
      at.tugraz.RequestType request,
      com.google.protobuf.RpcCallback<at.tugraz.ResponseType> done);

  /**
   * <pre>
   *for the roads
   * </pre>
   *
   * <code>rpc roadById(.eventservice.RoadById) returns (.eventservice.Event);</code>
   */
  public abstract void roadById(
      com.google.protobuf.RpcController controller,
      at.tugraz.RoadById request,
      com.google.protobuf.RpcCallback<at.tugraz.Event> done);

  /**
   * <code>rpc GetRoads(.eventservice.Roads) returns (.eventservice.Event);</code>
   */
  public abstract void getRoads(
      com.google.protobuf.RpcController controller,
      at.tugraz.Roads request,
      com.google.protobuf.RpcCallback<at.tugraz.Event> done);

  /**
   * <pre>
   *amenity full message
   * </pre>
   *
   * <code>rpc GetAmenity(.eventservice.Amenity) returns (.eventservice.Event);</code>
   */
  public abstract void getAmenity(
      com.google.protobuf.RpcController controller,
      at.tugraz.Amenity request,
      com.google.protobuf.RpcCallback<at.tugraz.Event> done);

  /**
   * <pre>
   * this is for mapping
   * </pre>
   *
   * <code>rpc GetMapping(.eventservice.MappingRequest) returns (.eventservice.Event);</code>
   */
  public abstract void getMapping(
      com.google.protobuf.RpcController controller,
      at.tugraz.MappingRequest request,
      com.google.protobuf.RpcCallback<at.tugraz.Event> done);

  public static final
      com.google.protobuf.Descriptors.ServiceDescriptor
      getDescriptor() {
    return at.tugraz.EventServiceProto.getDescriptor().getServices().get(0);
  }
  public final com.google.protobuf.Descriptors.ServiceDescriptor
      getDescriptorForType() {
    return getDescriptor();
  }

  public final void callMethod(
      com.google.protobuf.Descriptors.MethodDescriptor method,
      com.google.protobuf.RpcController controller,
      com.google.protobuf.Message request,
      com.google.protobuf.RpcCallback<
        com.google.protobuf.Message> done) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.callMethod() given method descriptor for wrong " +
        "service type.");
    }
    switch(method.getIndex()) {
      case 0:
        this.events(controller, (com.google.protobuf.Empty)request,
          com.google.protobuf.RpcUtil.<at.tugraz.Events>specializeCallback(
            done));
        return;
      case 1:
        this.eventById(controller, (at.tugraz.EventById)request,
          com.google.protobuf.RpcUtil.<at.tugraz.Event>specializeCallback(
            done));
        return;
      case 2:
        this.logEvent(controller, (at.tugraz.EventCreation)request,
          com.google.protobuf.RpcUtil.<at.tugraz.Event>specializeCallback(
            done));
        return;
      case 3:
        this.getOSMFile(controller, (at.tugraz.OSMFileRequest)request,
          com.google.protobuf.RpcUtil.<at.tugraz.OSMFileResponse>specializeCallback(
            done));
        return;
      case 4:
        this.getData(controller, (at.tugraz.RequestType)request,
          com.google.protobuf.RpcUtil.<at.tugraz.ResponseType>specializeCallback(
            done));
        return;
      case 5:
        this.roadById(controller, (at.tugraz.RoadById)request,
          com.google.protobuf.RpcUtil.<at.tugraz.Event>specializeCallback(
            done));
        return;
      case 6:
        this.getRoads(controller, (at.tugraz.Roads)request,
          com.google.protobuf.RpcUtil.<at.tugraz.Event>specializeCallback(
            done));
        return;
      case 7:
        this.getAmenity(controller, (at.tugraz.Amenity)request,
          com.google.protobuf.RpcUtil.<at.tugraz.Event>specializeCallback(
            done));
        return;
      case 8:
        this.getMapping(controller, (at.tugraz.MappingRequest)request,
          com.google.protobuf.RpcUtil.<at.tugraz.Event>specializeCallback(
            done));
        return;
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message
      getRequestPrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.getRequestPrototype() given method " +
        "descriptor for wrong service type.");
    }
    switch(method.getIndex()) {
      case 0:
        return com.google.protobuf.Empty.getDefaultInstance();
      case 1:
        return at.tugraz.EventById.getDefaultInstance();
      case 2:
        return at.tugraz.EventCreation.getDefaultInstance();
      case 3:
        return at.tugraz.OSMFileRequest.getDefaultInstance();
      case 4:
        return at.tugraz.RequestType.getDefaultInstance();
      case 5:
        return at.tugraz.RoadById.getDefaultInstance();
      case 6:
        return at.tugraz.Roads.getDefaultInstance();
      case 7:
        return at.tugraz.Amenity.getDefaultInstance();
      case 8:
        return at.tugraz.MappingRequest.getDefaultInstance();
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public final com.google.protobuf.Message
      getResponsePrototype(
      com.google.protobuf.Descriptors.MethodDescriptor method) {
    if (method.getService() != getDescriptor()) {
      throw new java.lang.IllegalArgumentException(
        "Service.getResponsePrototype() given method " +
        "descriptor for wrong service type.");
    }
    switch(method.getIndex()) {
      case 0:
        return at.tugraz.Events.getDefaultInstance();
      case 1:
        return at.tugraz.Event.getDefaultInstance();
      case 2:
        return at.tugraz.Event.getDefaultInstance();
      case 3:
        return at.tugraz.OSMFileResponse.getDefaultInstance();
      case 4:
        return at.tugraz.ResponseType.getDefaultInstance();
      case 5:
        return at.tugraz.Event.getDefaultInstance();
      case 6:
        return at.tugraz.Event.getDefaultInstance();
      case 7:
        return at.tugraz.Event.getDefaultInstance();
      case 8:
        return at.tugraz.Event.getDefaultInstance();
      default:
        throw new java.lang.AssertionError("Can't get here.");
    }
  }

  public static Stub newStub(
      com.google.protobuf.RpcChannel channel) {
    return new Stub(channel);
  }

  public static final class Stub extends at.tugraz.EventService implements Interface {
    private Stub(com.google.protobuf.RpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.RpcChannel channel;

    public com.google.protobuf.RpcChannel getChannel() {
      return channel;
    }

    public  void events(
        com.google.protobuf.RpcController controller,
        com.google.protobuf.Empty request,
        com.google.protobuf.RpcCallback<at.tugraz.Events> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(0),
        controller,
        request,
        at.tugraz.Events.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          at.tugraz.Events.class,
          at.tugraz.Events.getDefaultInstance()));
    }

    public  void eventById(
        com.google.protobuf.RpcController controller,
        at.tugraz.EventById request,
        com.google.protobuf.RpcCallback<at.tugraz.Event> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(1),
        controller,
        request,
        at.tugraz.Event.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          at.tugraz.Event.class,
          at.tugraz.Event.getDefaultInstance()));
    }

    public  void logEvent(
        com.google.protobuf.RpcController controller,
        at.tugraz.EventCreation request,
        com.google.protobuf.RpcCallback<at.tugraz.Event> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(2),
        controller,
        request,
        at.tugraz.Event.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          at.tugraz.Event.class,
          at.tugraz.Event.getDefaultInstance()));
    }

    public  void getOSMFile(
        com.google.protobuf.RpcController controller,
        at.tugraz.OSMFileRequest request,
        com.google.protobuf.RpcCallback<at.tugraz.OSMFileResponse> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(3),
        controller,
        request,
        at.tugraz.OSMFileResponse.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          at.tugraz.OSMFileResponse.class,
          at.tugraz.OSMFileResponse.getDefaultInstance()));
    }

    public  void getData(
        com.google.protobuf.RpcController controller,
        at.tugraz.RequestType request,
        com.google.protobuf.RpcCallback<at.tugraz.ResponseType> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(4),
        controller,
        request,
        at.tugraz.ResponseType.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          at.tugraz.ResponseType.class,
          at.tugraz.ResponseType.getDefaultInstance()));
    }

    public  void roadById(
        com.google.protobuf.RpcController controller,
        at.tugraz.RoadById request,
        com.google.protobuf.RpcCallback<at.tugraz.Event> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(5),
        controller,
        request,
        at.tugraz.Event.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          at.tugraz.Event.class,
          at.tugraz.Event.getDefaultInstance()));
    }

    public  void getRoads(
        com.google.protobuf.RpcController controller,
        at.tugraz.Roads request,
        com.google.protobuf.RpcCallback<at.tugraz.Event> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(6),
        controller,
        request,
        at.tugraz.Event.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          at.tugraz.Event.class,
          at.tugraz.Event.getDefaultInstance()));
    }

    public  void getAmenity(
        com.google.protobuf.RpcController controller,
        at.tugraz.Amenity request,
        com.google.protobuf.RpcCallback<at.tugraz.Event> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(7),
        controller,
        request,
        at.tugraz.Event.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          at.tugraz.Event.class,
          at.tugraz.Event.getDefaultInstance()));
    }

    public  void getMapping(
        com.google.protobuf.RpcController controller,
        at.tugraz.MappingRequest request,
        com.google.protobuf.RpcCallback<at.tugraz.Event> done) {
      channel.callMethod(
        getDescriptor().getMethods().get(8),
        controller,
        request,
        at.tugraz.Event.getDefaultInstance(),
        com.google.protobuf.RpcUtil.generalizeCallback(
          done,
          at.tugraz.Event.class,
          at.tugraz.Event.getDefaultInstance()));
    }
  }

  public static BlockingInterface newBlockingStub(
      com.google.protobuf.BlockingRpcChannel channel) {
    return new BlockingStub(channel);
  }

  public interface BlockingInterface {
    public at.tugraz.Events events(
        com.google.protobuf.RpcController controller,
        com.google.protobuf.Empty request)
        throws com.google.protobuf.ServiceException;

    public at.tugraz.Event eventById(
        com.google.protobuf.RpcController controller,
        at.tugraz.EventById request)
        throws com.google.protobuf.ServiceException;

    public at.tugraz.Event logEvent(
        com.google.protobuf.RpcController controller,
        at.tugraz.EventCreation request)
        throws com.google.protobuf.ServiceException;

    public at.tugraz.OSMFileResponse getOSMFile(
        com.google.protobuf.RpcController controller,
        at.tugraz.OSMFileRequest request)
        throws com.google.protobuf.ServiceException;

    public at.tugraz.ResponseType getData(
        com.google.protobuf.RpcController controller,
        at.tugraz.RequestType request)
        throws com.google.protobuf.ServiceException;

    public at.tugraz.Event roadById(
        com.google.protobuf.RpcController controller,
        at.tugraz.RoadById request)
        throws com.google.protobuf.ServiceException;

    public at.tugraz.Event getRoads(
        com.google.protobuf.RpcController controller,
        at.tugraz.Roads request)
        throws com.google.protobuf.ServiceException;

    public at.tugraz.Event getAmenity(
        com.google.protobuf.RpcController controller,
        at.tugraz.Amenity request)
        throws com.google.protobuf.ServiceException;

    public at.tugraz.Event getMapping(
        com.google.protobuf.RpcController controller,
        at.tugraz.MappingRequest request)
        throws com.google.protobuf.ServiceException;
  }

  private static final class BlockingStub implements BlockingInterface {
    private BlockingStub(com.google.protobuf.BlockingRpcChannel channel) {
      this.channel = channel;
    }

    private final com.google.protobuf.BlockingRpcChannel channel;

    public at.tugraz.Events events(
        com.google.protobuf.RpcController controller,
        com.google.protobuf.Empty request)
        throws com.google.protobuf.ServiceException {
      return (at.tugraz.Events) channel.callBlockingMethod(
        getDescriptor().getMethods().get(0),
        controller,
        request,
        at.tugraz.Events.getDefaultInstance());
    }


    public at.tugraz.Event eventById(
        com.google.protobuf.RpcController controller,
        at.tugraz.EventById request)
        throws com.google.protobuf.ServiceException {
      return (at.tugraz.Event) channel.callBlockingMethod(
        getDescriptor().getMethods().get(1),
        controller,
        request,
        at.tugraz.Event.getDefaultInstance());
    }


    public at.tugraz.Event logEvent(
        com.google.protobuf.RpcController controller,
        at.tugraz.EventCreation request)
        throws com.google.protobuf.ServiceException {
      return (at.tugraz.Event) channel.callBlockingMethod(
        getDescriptor().getMethods().get(2),
        controller,
        request,
        at.tugraz.Event.getDefaultInstance());
    }


    public at.tugraz.OSMFileResponse getOSMFile(
        com.google.protobuf.RpcController controller,
        at.tugraz.OSMFileRequest request)
        throws com.google.protobuf.ServiceException {
      return (at.tugraz.OSMFileResponse) channel.callBlockingMethod(
        getDescriptor().getMethods().get(3),
        controller,
        request,
        at.tugraz.OSMFileResponse.getDefaultInstance());
    }


    public at.tugraz.ResponseType getData(
        com.google.protobuf.RpcController controller,
        at.tugraz.RequestType request)
        throws com.google.protobuf.ServiceException {
      return (at.tugraz.ResponseType) channel.callBlockingMethod(
        getDescriptor().getMethods().get(4),
        controller,
        request,
        at.tugraz.ResponseType.getDefaultInstance());
    }


    public at.tugraz.Event roadById(
        com.google.protobuf.RpcController controller,
        at.tugraz.RoadById request)
        throws com.google.protobuf.ServiceException {
      return (at.tugraz.Event) channel.callBlockingMethod(
        getDescriptor().getMethods().get(5),
        controller,
        request,
        at.tugraz.Event.getDefaultInstance());
    }


    public at.tugraz.Event getRoads(
        com.google.protobuf.RpcController controller,
        at.tugraz.Roads request)
        throws com.google.protobuf.ServiceException {
      return (at.tugraz.Event) channel.callBlockingMethod(
        getDescriptor().getMethods().get(6),
        controller,
        request,
        at.tugraz.Event.getDefaultInstance());
    }


    public at.tugraz.Event getAmenity(
        com.google.protobuf.RpcController controller,
        at.tugraz.Amenity request)
        throws com.google.protobuf.ServiceException {
      return (at.tugraz.Event) channel.callBlockingMethod(
        getDescriptor().getMethods().get(7),
        controller,
        request,
        at.tugraz.Event.getDefaultInstance());
    }


    public at.tugraz.Event getMapping(
        com.google.protobuf.RpcController controller,
        at.tugraz.MappingRequest request)
        throws com.google.protobuf.ServiceException {
      return (at.tugraz.Event) channel.callBlockingMethod(
        getDescriptor().getMethods().get(8),
        controller,
        request,
        at.tugraz.Event.getDefaultInstance());
    }

  }

  // @@protoc_insertion_point(class_scope:eventservice.EventService)
}

